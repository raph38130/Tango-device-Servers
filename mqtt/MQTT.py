#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        MQTT.py
## 
## Project :     mqtt demo
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      rponsard$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""mqtt quick and dirty tests
broker is iot.eclipse.org by default (requires tcp port 1883 free)
or local broker can be set as property

tested with python3 and

python3 wrapper for mosquitto
sudo pip3 pip install paho-mqtt
"""

__all__ = ["MQTT", "MQTTClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(MQTT.additionnal_import) ENABLED START -----#
import paho.mqtt.client as mqtt
#----- PROTECTED REGION END -----#	//	MQTT.additionnal_import

## Device States Description
## No states for this device

class MQTT (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(MQTT.global_variables) ENABLED START -----#
    def on_message(self, client, userdata, msg):
        self.attr_sensor_read=str(msg.payload)
    #----- PROTECTED REGION END -----#	//	MQTT.global_variables

    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        MQTT.init_device(self)
        #----- PROTECTED REGION ID(MQTT.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MQTT.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(MQTT.delete_device) ENABLED START -----#
        

        #----- PROTECTED REGION END -----#	//	MQTT.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_sensor_read = ''
        #----- PROTECTED REGION ID(MQTT.init_device) ENABLED START -----#
        self.mqtt = mqtt.Client()
        #broker address
        if hasattr(self, 'broker') :
            self.mqtt.connect(self.broker, 1883, 60)
        else :
            self.mqtt.connect("iot.eclipse.org", 1883, 60)
        self.mqtt.subscribe("rp/sensor")
        self.mqtt.on_message = self.on_message
        self.mqtt.loop_start()
        #----- PROTECTED REGION END -----#	//	MQTT.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(MQTT.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MQTT.always_executed_hook

    #-----------------------------------------------------------------------------
    #    MQTT read/write attribute methods
    #-----------------------------------------------------------------------------
    
    def read_sensor(self, attr):
        self.debug_stream("In read_sensor()")
        #----- PROTECTED REGION ID(MQTT.sensor_read) ENABLED START -----#
        attr.set_value(self.attr_sensor_read)
        
        #----- PROTECTED REGION END -----#	//	MQTT.sensor_read
        
    
    
        #----- PROTECTED REGION ID(MQTT.initialize_dynamic_attributes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MQTT.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(MQTT.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MQTT.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    MQTT command methods
    #-----------------------------------------------------------------------------
    
    def Publish(self, argin):
        """ publish via mqtt
        
        :param argin: 
            sensor value
            pubished as rp/sensor (hardcoded for now)
        :type: PyTango.DevString
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In Publish()")
        #----- PROTECTED REGION ID(MQTT.Publish) ENABLED START -----#
        
        self.mqtt.publish("rp/sensor","this_is_tango_data "+argin)
	
        #----- PROTECTED REGION END -----#	//	MQTT.Publish
        

    #----- PROTECTED REGION ID(MQTT.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MQTT.programmer_methods

class MQTTClass(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(MQTT.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MQTT.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`MQTT.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(MQTT.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MQTT.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'Publish':
            [[PyTango.DevString, "sensor value\npubished as rp/sensor (hardcoded for now)"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'sensor':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(MQTTClass,MQTT,'MQTT')
        #----- PROTECTED REGION ID(MQTT.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MQTT.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:'+str(e))
    except Exception as e:
        print ('-------> An unforeseen exception occured....'+ str(e))

if __name__ == '__main__':
    main()
