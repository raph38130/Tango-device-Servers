/*----- PROTECTED REGION ID(UsbCam.cpp) ENABLED START -----*/
//static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        UsbCam.cpp
//
// description : C++ source for the UsbCam class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               UsbCam are implemented in this file.
//
// project :     a Tango DS for usb webcam
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <stdlib.h>
#include <UsbCam.h>
#include <UsbCamClass.h>
extern "C" void captureStop()  ;
extern "C" void captureStart()  ;
extern "C" void deviceOpen()  ;
extern "C" void deviceInit()  ;
extern "C" void mainLoop()  ;
extern "C" int frameRead()  ;
extern "C" void deviceUninit() ;
extern "C" void deviceClose()  ;
//extern "C" 
unsigned char* timg=NULL;

/*----- PROTECTED REGION END -----*/	//	UsbCam.cpp

/**
 *  UsbCam class description:
 *    use v4l
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  TakePhoto     |  take_photo
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  random    |  Tango::DevDouble	Scalar
//  myscalar  |  Tango::DevDouble	Scalar
//  img       |  Tango::DevUChar	Image  ( max = 640 x 480)
//================================================================

namespace UsbCam_ns
{
/*----- PROTECTED REGION ID(UsbCam::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	UsbCam::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : UsbCam::UsbCam()
 *	Description : Constructors for a Tango device
 *                implementing the classUsbCam
 */
//--------------------------------------------------------
UsbCam::UsbCam(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(UsbCam::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::constructor_1
}
//--------------------------------------------------------
UsbCam::UsbCam(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(UsbCam::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::constructor_2
}
//--------------------------------------------------------
UsbCam::UsbCam(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(UsbCam::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : UsbCam::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void UsbCam::delete_device()
{
	DEBUG_STREAM << "UsbCam::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(UsbCam::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
  captureStop();
  deviceUninit();
  deviceClose();
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::delete_device
	delete[] attr_random_read;
	delete[] attr_myscalar_read;
	delete[] attr_img_read;
}

//--------------------------------------------------------
/**
 *	Method      : UsbCam::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void UsbCam::init_device()
{
	DEBUG_STREAM << "UsbCam::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(UsbCam::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::init_device_before
	
	//	No device property to be read from database
	
	attr_random_read = new Tango::DevDouble[1];
	attr_myscalar_read = new Tango::DevDouble[1];
	attr_img_read = new Tango::DevUChar[640*480];

	/*----- PROTECTED REGION ID(UsbCam::init_device) ENABLED START -----*/
	
	//	Initialize device
	deviceOpen();
	deviceInit();
	captureStart();

	/*----- PROTECTED REGION END -----*/	//	UsbCam::init_device
}


//--------------------------------------------------------
/**
 *	Method      : UsbCam::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void UsbCam::always_executed_hook()
{
	INFO_STREAM << "UsbCam::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(UsbCam::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests  
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : UsbCam::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void UsbCam::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "UsbCam::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(UsbCam::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	// process frames
	timg=attr_img_read;
	mainLoop();
  	frameRead();
  	*attr_random_read=1000.0*rand()/RAND_MAX;;
	*attr_myscalar_read+=3.14;

	/*----- PROTECTED REGION END -----*/	//	UsbCam::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute random related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void UsbCam::read_random(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UsbCam::read_random(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(UsbCam::read_random) ENABLED START -----*/
	//	Set the attribute value
	
	attr.set_value(attr_random_read);
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::read_random
}
//--------------------------------------------------------
/**
 *	Read attribute myscalar related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void UsbCam::read_myscalar(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UsbCam::read_myscalar(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(UsbCam::read_myscalar) ENABLED START -----*/
	//	Set the attribute value
	
	attr.set_value(attr_myscalar_read);
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::read_myscalar
}
//--------------------------------------------------------
/**
 *	Read attribute img related method
 *	Description: 
 *
 *	Data type:	Tango::DevUChar
 *	Attr type:	Image max = 640 x 480
 */
//--------------------------------------------------------
void UsbCam::read_img(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UsbCam::read_img(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(UsbCam::read_img) ENABLED START -----*/
	//	Set the attribute value

	attr.set_value(attr_img_read, 640, 480);
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::read_img
}

//--------------------------------------------------------
/**
 *	Method      : UsbCam::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void UsbCam::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(UsbCam::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command TakePhoto related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void UsbCam::take_photo()
{
	DEBUG_STREAM << "UsbCam::TakePhoto()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(UsbCam::take_photo) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	UsbCam::take_photo
}

/*----- PROTECTED REGION ID(UsbCam::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	UsbCam::namespace_ending
} //	namespace
