#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        SimLed.py
#
#  Project :     
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      rponsard$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["SimLed", "SimLedClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(SimLed.additionnal_import) ENABLED START -----#
import time, random, tkinter, threading

class MyGui(threading.Thread):
    def __init__(self,name):
        self.title=name
        threading.Thread.__init__(self)
        threading.Thread.start(self)

    def run(self):
        self.root=tkinter.Tk()
        self.root.title(self.title)
        self.root.mainloop()

#----- PROTECTED REGION END -----#	//	SimLed.additionnal_import

# Device States Description
# ON : 
# OFF : 


class SimLed (PyTango.Device_4Impl):
    """"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(SimLed.global_variables) ENABLED START -----#
    gui=MyGui("Leds Sim V1.2")    
    s1=""
    #----- PROTECTED REGION END -----#	//	SimLed.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        SimLed.init_device(self)
        #----- PROTECTED REGION ID(SimLed.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	SimLed.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(SimLed.delete_device) ENABLED START -----#
        self.set_state(PyTango.DevState.OFF)
        self.gui.c.destroy()
        self.gui.c = None
        #----- PROTECTED REGION END -----#	//	SimLed.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        #----- PROTECTED REGION ID(SimLed.init_device) ENABLED START -----#
        
        if (hasattr(self.gui,'c') == False) or (self.gui.c==None): 
            self.gui.c=tkinter.Canvas(self.gui.root,width=250,height=350)
            self.gui.c.pack()
        self.set_state(PyTango.DevState.ON)
        #----- PROTECTED REGION END -----#	//	SimLed.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(SimLed.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	SimLed.always_executed_hook

    # -------------------------------------------------------------------------
    #    SimLed read/write attribute methods
    # -------------------------------------------------------------------------
    
    def write_Led(self, attr):
        self.debug_stream("In write_Led()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(SimLed.Led_write) ENABLED START -----#
        if self.Color=="red":
            x0,y0,x1,y1=10,10,60,70
        if self.Color=="green":
            x0,y0,x1,y1=10,90,60,150
        if self.Color=="blue":
            x0,y0,x1,y1=10,170,60,230
        if self.Color=="white":
            x0,y0,x1,y1=10,250,60,310
        if data==True:
            self.gui.c.create_oval(x0,y0,x1,y1,fill=self.Color,outline=self.Color)
        else:
            self.gui.c.create_oval(x0,y0,x1,y1,fill="lightgray",outline="lightgray")
        #----- PROTECTED REGION END -----#	//	SimLed.Led_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(SimLed.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	SimLed.read_attr_hardware


    # -------------------------------------------------------------------------
    #    SimLed command methods
    # -------------------------------------------------------------------------
    
    def On(self):
        """ 
        """
        self.debug_stream("In On()")
        #----- PROTECTED REGION ID(SimLed.On) ENABLED START -----#
        self.set_state(PyTango.DevState.ON)
        #----- PROTECTED REGION END -----#	//	SimLed.On
        
    def is_On_allowed(self):
        self.debug_stream("In is_On_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.ON])
        #----- PROTECTED REGION ID(SimLed.is_On_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	SimLed.is_On_allowed
        return state_ok
        
    def Off(self):
        """ 
        """
        self.debug_stream("In Off()")
        #----- PROTECTED REGION ID(SimLed.Off) ENABLED START -----#
        self.set_state(PyTango.DevState.OFF)
        #----- PROTECTED REGION END -----#	//	SimLed.Off
        
    def is_Off_allowed(self):
        self.debug_stream("In is_Off_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        #----- PROTECTED REGION ID(SimLed.is_Off_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	SimLed.is_Off_allowed
        return state_ok
        

    #----- PROTECTED REGION ID(SimLed.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	SimLed.programmer_methods

class SimLedClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(SimLed.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	SimLed.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'Color':
            [PyTango.DevString, 
             '',
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'On':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Off':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'Led':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(SimLedClass, SimLed, 'SimLed')
        #----- PROTECTED REGION ID(SimLed.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	SimLed.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
