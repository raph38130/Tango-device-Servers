#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        PiSenseHat.py
#
#  Project :     
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      rponsard$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["PiSenseHat", "PiSenseHatClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(PiSenseHat.additionnal_import) ENABLED START -----#
import sense_hat,threading

#----- PROTECTED REGION END -----#	//	PiSenseHat.additionnal_import

# Device States Description
# ON : 
# OFF : 


class PiSenseHat (PyTango.Device_4Impl):
    """raspberry pi sense hat device server"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(PiSenseHat.global_variables) ENABLED START -----#
    def cb(self):
        while True:
            e=self.stick.wait_for_event() # block until an event is available
            if e[2]=='pressed' or e[2]=='held':
                self.attr_Stick_read=True
            else:
                self.attr_Stick_read=False
            print("stick event ",self.attr_Stick_read)

    #----- PROTECTED REGION END -----#	//	PiSenseHat.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        PiSenseHat.init_device(self)
        #----- PROTECTED REGION ID(PiSenseHat.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(PiSenseHat.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Temperature_read = 0.0
        self.attr_Stick_read = False
        #----- PROTECTED REGION ID(PiSenseHat.init_device) ENABLED START -----#
        self.set_state(PyTango.DevState.OFF)
        self.s=sense_hat.SenseHat()
        self.stick=sense_hat.SenseStick()
        threading.Thread(target = self.cb).start()

        #----- PROTECTED REGION END -----#	//	PiSenseHat.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(PiSenseHat.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.always_executed_hook

    # -------------------------------------------------------------------------
    #    PiSenseHat read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_Temperature(self, attr):
        self.debug_stream("In read_Temperature()")
        #----- PROTECTED REGION ID(PiSenseHat.Temperature_read) ENABLED START -----#
        self.attr_Temperature_read=self.s.get_temperature()
        attr.set_value(self.attr_Temperature_read)
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.Temperature_read
        
    def write_Letter(self, attr):
        self.debug_stream("In write_Letter()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PiSenseHat.Letter_write) ENABLED START -----#
        self.s.show_letter(chr(data))
        #----- PROTECTED REGION END -----#	//	PiSenseHat.Letter_write
        
    def is_Letter_allowed(self, attr):
        self.debug_stream("In is_Letter_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        else:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        #----- PROTECTED REGION ID(PiSenseHat.is_Letter_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.is_Letter_allowed
        return state_ok
        
    def write_Led(self, attr):
        self.debug_stream("In write_Led()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PiSenseHat.Led_write) ENABLED START -----#
        if data==True:
            self.s.set_pixel(int(self.x),int(self.y),list(map(int,self.color.split(','))))
        else:
            self.s.set_pixel(int(self.x),int(self.y),(0,0,0))
        #----- PROTECTED REGION END -----#	//	PiSenseHat.Led_write
        
    def is_Led_allowed(self, attr):
        self.debug_stream("In is_Led_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        else:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        #----- PROTECTED REGION ID(PiSenseHat.is_Led_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.is_Led_allowed
        return state_ok
        
    def read_Stick(self, attr):
        self.debug_stream("In read_Stick()")
        #----- PROTECTED REGION ID(PiSenseHat.Stick_read) ENABLED START -----#
        attr.set_value(self.attr_Stick_read)
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.Stick_read
        
    def is_Stick_allowed(self, attr):
        self.debug_stream("In is_Stick_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(PiSenseHat.is_Stick_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.is_Stick_allowed
        return state_ok
        
    def write_Pixels(self, attr):
        self.debug_stream("In write_Pixels()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PiSenseHat.Pixels_write) ENABLED START -----#
        for x in data:
            for y in x:
                if y=='R':
                    pixels.append((255,0,0))
                if y=='G':
                    pixels.append((0,255,0))
                if y=='B':
                    pixels.append((0,0,255))
        self.debug_stream("Pixels= ",pixels)
        self.s.set_pixels(pixels)
        #----- PROTECTED REGION END -----#	//	PiSenseHat.Pixels_write
        
    def is_Pixels_allowed(self, attr):
        self.debug_stream("In is_Pixels_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        else:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        #----- PROTECTED REGION ID(PiSenseHat.is_Pixels_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.is_Pixels_allowed
        return state_ok
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(PiSenseHat.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.read_attr_hardware


    # -------------------------------------------------------------------------
    #    PiSenseHat command methods
    # -------------------------------------------------------------------------
    
    def On(self):
        """ 
        """
        self.debug_stream("In On()")
        #----- PROTECTED REGION ID(PiSenseHat.On) ENABLED START -----#
        self.set_state(PyTango.DevState.ON)
        #----- PROTECTED REGION END -----#	//	PiSenseHat.On
        
    def is_On_allowed(self):
        self.debug_stream("In is_On_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.ON])
        #----- PROTECTED REGION ID(PiSenseHat.is_On_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.is_On_allowed
        return state_ok
        
    def Off(self):
        """ 
        """
        self.debug_stream("In Off()")
        #----- PROTECTED REGION ID(PiSenseHat.Off) ENABLED START -----#
        self.set_state(PyTango.DevState.OFF)
        #----- PROTECTED REGION END -----#	//	PiSenseHat.Off
        
    def is_Off_allowed(self):
        self.debug_stream("In is_Off_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        #----- PROTECTED REGION ID(PiSenseHat.is_Off_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.is_Off_allowed
        return state_ok
        

    #----- PROTECTED REGION ID(PiSenseHat.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	PiSenseHat.programmer_methods

class PiSenseHatClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(PiSenseHat.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	PiSenseHat.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'x':
            [PyTango.DevString, 
             '',
            ["0"] ],
        'y':
            [PyTango.DevString, 
             '',
            ["0"] ],
        'color':
            [PyTango.DevString, 
             '',
            ["255,0,0"] ],
        }


    #    Command definitions
    cmd_list = {
        'On':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Off':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'Temperature':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'Letter':
            [[PyTango.DevUChar,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'Led':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'Stick':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Pixels':
            [[PyTango.DevString,
            PyTango.IMAGE,
            PyTango.WRITE, 8, 8]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(PiSenseHatClass, PiSenseHat, 'PiSenseHat')
        #----- PROTECTED REGION ID(PiSenseHat.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PiSenseHat.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
