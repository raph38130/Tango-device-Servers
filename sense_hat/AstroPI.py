#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        AstroPI.py
#
#  Project :     astro pi / sense hat device server for raspberrypi
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      rponsard$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["AstroPI", "AstroPIClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(AstroPI.additionnal_import) ENABLED START -----#
from sense_hat import SenseHat
sense = SenseHat()

#----- PROTECTED REGION END -----#	//	AstroPI.additionnal_import

# Device States Description
# ON : 
# OFF : 


class AstroPI (PyTango.Device_4Impl):
    """"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(AstroPI.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	AstroPI.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        AstroPI.init_device(self)
        #----- PROTECTED REGION ID(AstroPI.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(AstroPI.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Temperature_read = 0.0
        self.attr_Pressure_read = 0.0
        self.attr_Humidity_read = 0.0
        self.attr_Gyro_read = [0.0]
        self.attr_Compass_read = [0.0]
        #----- PROTECTED REGION ID(AstroPI.init_device) ENABLED START -----#
        self.set_state(PyTango.DevState.ON)
        sense.clear()
        #----- PROTECTED REGION END -----#	//	AstroPI.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(AstroPI.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.always_executed_hook

    # -------------------------------------------------------------------------
    #    AstroPI read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_Temperature(self, attr):
        self.debug_stream("In read_Temperature()")
        #----- PROTECTED REGION ID(AstroPI.Temperature_read) ENABLED START -----#
        self.attr_Temperature_read=sense.get_temperature()
        attr.set_value(self.attr_Temperature_read)
        
        #----- PROTECTED REGION END -----#	//	AstroPI.Temperature_read
        
    def is_Temperature_allowed(self, attr):
        self.debug_stream("In is_Temperature_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(AstroPI.is_Temperature_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.is_Temperature_allowed
        return state_ok
        
    def read_Pressure(self, attr):
        self.debug_stream("In read_Pressure()")
        #----- PROTECTED REGION ID(AstroPI.Pressure_read) ENABLED START -----#
        self.attr_Pressure_read=sense.get_pressure()
        attr.set_value(self.attr_Pressure_read)
        
        #----- PROTECTED REGION END -----#	//	AstroPI.Pressure_read
        
    def is_Pressure_allowed(self, attr):
        self.debug_stream("In is_Pressure_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(AstroPI.is_Pressure_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.is_Pressure_allowed
        return state_ok
        
    def read_Humidity(self, attr):
        self.debug_stream("In read_Humidity()")
        #----- PROTECTED REGION ID(AstroPI.Humidity_read) ENABLED START -----#
        self.attr_Humidity_read=sense.get_humidity()
        attr.set_value(self.attr_Humidity_read)
        
        #----- PROTECTED REGION END -----#	//	AstroPI.Humidity_read
        
    def read_Gyro(self, attr):
        self.debug_stream("In read_Gyro()")
        #----- PROTECTED REGION ID(AstroPI.Gyro_read) ENABLED START -----#
        attr.set_value(self.attr_Gyro_read)
        
        #----- PROTECTED REGION END -----#	//	AstroPI.Gyro_read
        
    def is_Gyro_allowed(self, attr):
        self.debug_stream("In is_Gyro_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(AstroPI.is_Gyro_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.is_Gyro_allowed
        return state_ok
        
    def read_Compass(self, attr):
        self.debug_stream("In read_Compass()")
        #----- PROTECTED REGION ID(AstroPI.Compass_read) ENABLED START -----#
        self.attr_Compass_read=sense.get_compass_raw()['x'],sense.get_compass_raw()['y'],sense.get_compass_raw()['z']
        attr.set_value(self.attr_Compass_read)
        
        #----- PROTECTED REGION END -----#	//	AstroPI.Compass_read
        
    def is_Compass_allowed(self, attr):
        self.debug_stream("In is_Compass_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(AstroPI.is_Compass_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.is_Compass_allowed
        return state_ok
        
    def write_LedMatrix(self, attr):
        self.debug_stream("In write_LedMatrix()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(AstroPI.LedMatrix_write) ENABLED START -----#
        leds=[]
        print (data[0])
        for i in range(0,8):
            for j in range(0,8):
                leds.append([data[i][j] & 0xFF,(data[i][j]>>8) & 0xFF,(data[i][j]>>16) & 0xFF])
        #x,y,color=3,3,(0xFF,0,0)
        sense.set_pixels(leds)
        #----- PROTECTED REGION END -----#	//	AstroPI.LedMatrix_write
        
    def is_LedMatrix_allowed(self, attr):
        self.debug_stream("In is_LedMatrix_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        else:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        #----- PROTECTED REGION ID(AstroPI.is_LedMatrix_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.is_LedMatrix_allowed
        return state_ok
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(AstroPI.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.read_attr_hardware


    # -------------------------------------------------------------------------
    #    AstroPI command methods
    # -------------------------------------------------------------------------
    
    def SwitchOff(self):
        """ 
        """
        self.debug_stream("In SwitchOff()")
        #----- PROTECTED REGION ID(AstroPI.SwitchOff) ENABLED START -----#
        self.set_state(PyTango.DevState.OFF)
        #----- PROTECTED REGION END -----#	//	AstroPI.SwitchOff
        
    def is_SwitchOff_allowed(self):
        self.debug_stream("In is_SwitchOff_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        #----- PROTECTED REGION ID(AstroPI.is_SwitchOff_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.is_SwitchOff_allowed
        return state_ok
        

    #----- PROTECTED REGION ID(AstroPI.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	AstroPI.programmer_methods

class AstroPIClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(AstroPI.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	AstroPI.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'SwitchOff':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'Temperature':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'Pressure':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'Humidity':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'Gyro':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 3]],
        'Compass':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 3]],
        'LedMatrix':
            [[PyTango.DevLong,
            PyTango.IMAGE,
            PyTango.WRITE, 8, 8]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(AstroPIClass, AstroPI, 'AstroPI')
        #----- PROTECTED REGION ID(AstroPI.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AstroPI.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
