/*----- PROTECTED REGION ID(JavaDSTest.java) ENABLED START -----*/
//=============================================================================
//
// file :        JavaDSTest.java
//
// description : Java source for the JavaDSTest class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               JavaDSTest are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

/*----- PROTECTED REGION END -----*/	//	JavaDSTest.java

package org.tango.javadstest;

/*----- PROTECTED REGION ID(JavaDSTest.imports) ENABLED START -----*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.ext.XLogger;
import org.slf4j.ext.XLoggerFactory;
import org.tango.DeviceState;
import org.tango.server.InvocationContext;
import org.tango.server.ServerManager;
import org.tango.server.annotation.AroundInvoke;
import org.tango.server.annotation.Attribute;
import org.tango.server.annotation.AttributeProperties;
import org.tango.server.annotation.ClassProperty;
import org.tango.server.annotation.Command;
import org.tango.server.annotation.Delete;
import org.tango.server.annotation.Device;
import org.tango.server.annotation.DeviceProperty;
import org.tango.server.annotation.DynamicManagement;
import org.tango.server.annotation.Init;
import org.tango.server.annotation.State;
import org.tango.server.annotation.StateMachine;
import org.tango.server.annotation.Status;
import org.tango.server.annotation.DeviceManagement;
import org.tango.server.dynamic.DynamicManager;
import org.tango.server.device.DeviceManager;
import org.tango.server.dynamic.DynamicManager;
import org.tango.server.events.EventManager;
import org.tango.server.events.EventType;
import org.tango.utils.DevFailedUtils;

//	Import Tango IDL types
import fr.esrf.Tango.*;
import fr.esrf.TangoDs.Except;

/*----- PROTECTED REGION END -----*/	//	JavaDSTest.imports

/**
 *  JavaDSTest class description:
 *    
 */

@Device
public class JavaDSTest {

    private static final Logger logger = LoggerFactory.getLogger(JavaDSTest.class);
    private static final XLogger xlogger = XLoggerFactory.getXLogger(JavaDSTest.class);
	//========================================================
	//	Programmer's data members
	//========================================================
    /*----- PROTECTED REGION ID(JavaDSTest.variables) ENABLED START -----*/
    
    //	Put static variables here
    
    /*----- PROTECTED REGION END -----*/	//	JavaDSTest.variables
	/*----- PROTECTED REGION ID(JavaDSTest.private) ENABLED START -----*/
	
	//	Put private variables here
	
	/*----- PROTECTED REGION END -----*/	//	JavaDSTest.private

	//========================================================
	//	Property data members and related methods
	//========================================================


	//========================================================
	//	Miscellaneous methods
	//========================================================
	/**
	 * Initialize the device.
	 * 
	 * @throws DevFailed if something fails during the device initialization.
	 */
	@Init(lazyLoading = false)
	public final void initDevice() throws DevFailed {
		xlogger.entry();
		logger.debug("init device " + deviceManager.getName());
		/*----- PROTECTED REGION ID(JavaDSTest.initDevice) ENABLED START -----*/
		
		//	Put your device initialization code here
		
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.initDevice
		xlogger.exit();
	}

	/**
	 * all resources may be closed here. Collections may be also cleared.
	 * 
	 * @throws DevFailed if something fails during the device object delation.
	 */
	@Delete
	public final void deleteDevice() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(JavaDSTest.deleteDevice) ENABLED START -----*/
		
		//	Put your device clearing code here
		
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.deleteDevice
		xlogger.exit();
	}

	/**
	 * Method called before and after command and attribute calls.
	 * @param ctx the invocation context
	 * @throws DevFailed if something fails during this method execution.
	 */
	@AroundInvoke
	public final void aroundInvoke(final InvocationContext ctx) throws DevFailed {
		xlogger.entry(ctx);
		/*----- PROTECTED REGION ID(JavaDSTest.aroundInvoke) ENABLED START -----*/
		
		//	Put aroundInvoke code here
		
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.aroundInvoke
		xlogger.exit();
	}

	
	/**
	 * dynamic command and attribute management. Will be injected by the framework.
	 */
	@DynamicManagement
	private DynamicManager dynamicManager;
	/**
	 * @param dynamicManager the DynamicManager instance 
	 * @throws DevFailed if something fails during this method execution.
	 */
	public void setDynamicManager(final DynamicManager dynamicManager) throws DevFailed {
		this.dynamicManager = dynamicManager;
		/*----- PROTECTED REGION ID(JavaDSTest.setDynamicManager) ENABLED START -----*/
		
		//	Put your code here
		
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.setDynamicManager
	}
	
	/**
	 * Device management. Will be injected by the framework.
	 */
	@DeviceManagement
	DeviceManager deviceManager;
	public void setDeviceManager(DeviceManager deviceManager){
		this.deviceManager= deviceManager ;
	}


	//========================================================
	//	Attribute data members and related methods
	//========================================================
	/**
	 * Attribute aread_write, double, Scalar, READ_WRITE
	 * description:
	 *     
	 */
	@Attribute(name="aread_write")
	private double aread_write;
	/**
	 * Read attribute aread_write
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getAread_write() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(JavaDSTest.getaread_write) ENABLED START -----*/
		
		//	Put read attribute code here
		aread_write++;
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.getaread_write
		attributeValue.setValue(aread_write);
		xlogger.exit();
		return attributeValue;
	}
	/**
	 * Write attribute aread_write
	 * @param  aread_write value to write
	 * @throws DevFailed if read attribute failed.
	 */
	public void setAread_write(double aread_write) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(JavaDSTest.setaread_write) ENABLED START -----*/
		
		//	Put write attribute code here
		
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.setaread_write
		xlogger.exit();
	}
	
	/**
	 * Attribute areadwithwrite, double, Scalar, READ_WRITE
	 * description:
	 *     
	 */
	@Attribute(name="areadwithwrite")
	private double areadwithwrite;
	/**
	 * Read attribute areadwithwrite
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getAreadwithwrite() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(JavaDSTest.getareadwithwrite) ENABLED START -----*/
		
		//	Put read attribute code here
		
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.getareadwithwrite
		attributeValue.setValue(areadwithwrite);
		xlogger.exit();
		return attributeValue;
	}
	/**
	 * Write attribute areadwithwrite
	 * @param  areadwithwrite value to write
	 * @throws DevFailed if read attribute failed.
	 */
	public void setAreadwithwrite(double areadwithwrite) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(JavaDSTest.setareadwithwrite) ENABLED START -----*/
		
		//	Put write attribute code here
		
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.setareadwithwrite
		xlogger.exit();
	}
	

	//========================================================
	//	Command data members and related methods
	//========================================================
	/**
	 * The state of the device
	*/
	@State
	private DevState state = DevState.UNKNOWN;
	/**
	 * Execute command "State".
	 * description: This command gets the device state (stored in its 'state' data member) and returns it to the caller.
	 * @return Device state
	 * @throws DevFailed if command execution failed.
	 */
	public final DevState getState() throws DevFailed {
		/*----- PROTECTED REGION ID(JavaDSTest.getState) ENABLED START -----*/
		
		//	Put state code here
		
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.getState
		return state;
	}
	/**
	 * Set the device state
	 * @param state the new device state
	 */
	public void setState(final DevState state) {
		this.state = state;
	}
	
	/**
	 * The status of the device
	 */
	@Status
	private String status = "Server is starting. The device state is unknown";
	/**
	 * Execute command "Status".
	 * description: This command gets the device status (stored in its 'status' data member) and returns it to the caller.
	 * @return Device status
	 * @throws DevFailed if command execution failed.
	 */
	public final String getStatus() throws DevFailed {
		/*----- PROTECTED REGION ID(JavaDSTest.getStatus) ENABLED START -----*/
		
		//	Put status code here
		
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.getStatus
		return status;
	}
	/**
	 * Set the device status
	 * @param status the new device status
	 */
	public void setStatus(final String status) {
		this.status = status;
	}
	
	/**
	 * Execute command "Func".
	 * description: 
	 * @param funcIn 
	 * @return 
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="Func", inTypeDesc="", outTypeDesc="")
	public float Func(float funcIn) throws DevFailed {
		xlogger.entry();
		float funcOut;
		/*----- PROTECTED REGION ID(JavaDSTest.func) ENABLED START -----*/
		
		//	Put command code here
		funcOut=2*funcIn;
		/*----- PROTECTED REGION END -----*/	//	JavaDSTest.func
		xlogger.exit();
		return funcOut;
	}
	

	//========================================================
	//	Programmer's methods
	//========================================================
	/*----- PROTECTED REGION ID(JavaDSTest.methods) ENABLED START -----*/
	
	//	Put your own methods here
	
	/*----- PROTECTED REGION END -----*/	//	JavaDSTest.methods


	
	
	
	
	/**
	 * Starts the server.
	 * @param args program arguments (instance_name [-v[trace level]]  [-nodb [-dlist <device name list>] [-file=fileName]])
	 */
	public static void main(final String[] args) {
		ServerManager.getInstance().start(args, JavaDSTest.class);
		System.out.println("------- Started -------------");
	}
}
