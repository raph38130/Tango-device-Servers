/*----- PROTECTED REGION ID(Scopix.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Scopix.cpp
//
// description : C++ source for the Scopix class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Scopix are implemented in this file.
//
// project :     scopix handeld oscilloscope
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Scopix.h>
#include <ScopixClass.h>

/*----- PROTECTED REGION END -----*/	//	Scopix.cpp

/**
 *  Scopix class description:
 *    OW 7062-C
 *    use serialline class
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Idn           |  idn
//  Date          |  date
//  Time          |  time
//  GpibCmd       |  gpib_cmd
//  Trace         |  trace
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Input1     |  Tango::DevDouble	Scalar
//  Spectrum1  |  Tango::DevDouble	Spectrum  ( max = 2500)
//================================================================

namespace Scopix_ns
{
/*----- PROTECTED REGION ID(Scopix::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Scopix::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Scopix::Scopix()
 *	Description : Constructors for a Tango device
 *                implementing the classScopix
 */
//--------------------------------------------------------
Scopix::Scopix(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Scopix::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Scopix::constructor_1
}
//--------------------------------------------------------
Scopix::Scopix(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Scopix::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Scopix::constructor_2
}
//--------------------------------------------------------
Scopix::Scopix(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Scopix::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Scopix::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Scopix::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Scopix::delete_device()
{
	DEBUG_STREAM << "Scopix::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Scopix::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	Scopix::delete_device
	delete[] attr_Input1_read;
	delete[] attr_Spectrum1_read;
}

//--------------------------------------------------------
/**
 *	Method      : Scopix::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Scopix::init_device()
{
	DEBUG_STREAM << "Scopix::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Scopix::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	Scopix::init_device_before
	
	//	No device property to be read from database
	
	attr_Input1_read = new Tango::DevDouble[1];
	attr_Spectrum1_read = new Tango::DevDouble[2500];
	/*----- PROTECTED REGION ID(Scopix::init_device) ENABLED START -----*/
	
	//	Initialize device
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("__SubDevices"));
	get_db_device()->get_property(dev_prop);
	DEBUG_STREAM << "PROPERTY " << dev_prop[0].name << endl;
	DEBUG_STREAM << dev_prop[0].value_string[0];
	serial_line = new Tango::DeviceProxy(dev_prop[0].value_string[0]);
	Tango::DeviceData d;
	d << (Tango::DevULong) 115200;
	serial_line->command_inout("DevSerSetBaudRate",d);
	/*----- PROTECTED REGION END -----*/	//	Scopix::init_device
}


//--------------------------------------------------------
/**
 *	Method      : Scopix::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Scopix::always_executed_hook()
{
	DEBUG_STREAM << "Scopix::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Scopix::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	Scopix::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Scopix::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Scopix::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Scopix::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Scopix::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Scopix::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Input1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Scopix::read_Input1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Scopix::read_Input1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Scopix::read_Input1) ENABLED START -----*/
	//	Set the attribute value
	string str="MEAS:DMM? INT1\n",s;//"MEAS:DMM? INT1\n"
	double d;
	Tango::DeviceData data,res;
	data << 2;
	serial_line->command_inout("DevSerFlush",data);

	data <<  str;
	res=serial_line->command_inout("DevSerWriteString",data);
	usleep(100000);
	res=serial_line->command_inout("DevSerReadRaw");
	res >> s;
	cout << "input1 " << s << endl;
	sscanf(s.c_str(),"%lf mV",&d);
	*attr_Input1_read=d;
	attr.set_value(attr_Input1_read);

	/*----- PROTECTED REGION END -----*/	//	Scopix::read_Input1
}
//--------------------------------------------------------
/**
 *	Read attribute Spectrum1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 2500
 */
//--------------------------------------------------------
void Scopix::read_Spectrum1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Scopix::read_Spectrum1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Scopix::read_Spectrum1) ENABLED START -----*/
	//	Set the attribute value

	attr.set_value(attr_Spectrum1_read, 2500);
	
	/*----- PROTECTED REGION END -----*/	//	Scopix::read_Spectrum1
}

//--------------------------------------------------------
/**
 *	Method      : Scopix::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Scopix::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Scopix::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Scopix::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Idn related method
 *	Description: 
 *
 *	@returns scopix id
 */
//--------------------------------------------------------
Tango::DevString Scopix::idn()
{
	Tango::DevString argout;
	DEBUG_STREAM << "Scopix::Idn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Scopix::idn) ENABLED START -----*/
	
	//	Add your own code
	Tango::DeviceData res, data;
	Tango::DevVarLongStringArray * d= new Tango::DevVarLongStringArray();
	string str="*idn?\n";

	d->svalue.length(1);
	d->svalue[0]=CORBA::string_dup(str.c_str());
	d->lvalue.length(1);
	d->lvalue[0]=2;
	data << d;
	res=serial_line->command_inout("WriteRead",data);
	res >> str;
	argout=CORBA::string_dup(str.c_str());
	/*----- PROTECTED REGION END -----*/	//	Scopix::idn
	return argout;
}
//--------------------------------------------------------
/**
 *	Command Date related method
 *	Description: 
 *
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevString Scopix::date()
{
	Tango::DevString argout;
	DEBUG_STREAM << "Scopix::Date()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Scopix::date) ENABLED START -----*/
	
	//	Add your own code
	Tango::DeviceData data,res;
	string str="SYST:DATE?\n";
	data <<  str;
	res=serial_line->command_inout("DevSerWriteString",data);

	data << (Tango::DevLong)2;
	res=serial_line->command_inout("DevSerReadString",data);
	res >> str;
	argout=CORBA::string_dup(str.c_str());
	
	/*----- PROTECTED REGION END -----*/	//	Scopix::date
	return argout;
}
//--------------------------------------------------------
/**
 *	Command Time related method
 *	Description: 
 *
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevString Scopix::time()
{
	Tango::DevString argout;
	DEBUG_STREAM << "Scopix::Time()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Scopix::time) ENABLED START -----*/
	
	//	Add your own code
	Tango::DeviceData data,res;
	string str="SYST:TIME?\n";
	data <<  str;
	res=serial_line->command_inout("DevSerWriteString",data);


	data << (Tango::DevLong)2;
	res=serial_line->command_inout("DevSerReadString",data);

	res >> str;
	argout=CORBA::string_dup(str.c_str());
	/*----- PROTECTED REGION END -----*/	//	Scopix::time
	return argout;
}
//--------------------------------------------------------
/**
 *	Command GpibCmd related method
 *	Description: 
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevString Scopix::gpib_cmd(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "Scopix::GpibCmd()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Scopix::gpib_cmd) ENABLED START -----*/
	
	//	Add your own code
	Tango::DeviceData res, data;
		Tango::DevVarLongStringArray * d= new Tango::DevVarLongStringArray();
		string str="*idn?\n";
		str  = argin;
		d->svalue.length(1);
		d->svalue[0]=CORBA::string_dup(str.c_str());
		d->lvalue.length(1);
		d->lvalue[0]=2;
		data << d;
		res=serial_line->command_inout("WriteRead",data);
		res >> str;
		argout=CORBA::string_dup(str.c_str());
	
	/*----- PROTECTED REGION END -----*/	//	Scopix::gpib_cmd
	return argout;
}
//--------------------------------------------------------
/**
 *	Command Trace related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Scopix::trace()
{
	DEBUG_STREAM << "Scopix::Trace()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Scopix::trace) ENABLED START -----*/
	
	//	Add your own code
	string str="TRAC? INT1\n";//MEASure:VOLT[:DC]?
	Tango::DeviceData data,res;
	data << 2;
	serial_line->command_inout("DevSerFlush",data);

	data <<  str;
	res=serial_line->command_inout("DevSerWriteString",data);

	string buf="",s;
	int t=0,ll=0;

	do{
		usleep(50000);
		res=serial_line->command_inout("DevSerReadRaw");
		res >> s;
		ll=s.length();
		t += ll;
		buf += s;
	} while (ll>0);
				/*do{
						usleep(50000);
						res=serial_line->command_inout("DevSerGetNChar");
						t=ll;
						res >> ll;
				} while ((ll != t) && (ll != 0));

				res=serial_line->command_inout("DevSerReadRaw");
				res >> buf;
				 */
	int n[4],k=0,l=0;
	double val;

	for(unsigned int i=0; i<buf.length();i++ ) {
		//cout << buf[i];
		if (buf[i]==','){
			k = (k+1) % 4;
			if (k==0) {
				if (n[1]>0x0F) val=0;
				else val=((double)(((n[1] & 0x0F)*256+n[2])*256+n[3])) / ((double)(16*256*256));
				//cout << n[0] << " "<<n[1] << " "<<n[2] << " "<<n[3] << " "<< val << endl;
				attr_Spectrum1_read[l++]=val;
				n[0]=0;n[1]=0;n[2]=0;n[3]=0;
			}
		}
		else
			n[k]=n[k]*10+buf[i]-'0';
	}
	DEBUG_STREAM << "got " << l << " values from scopix" << endl;

	/*----- PROTECTED REGION END -----*/	//	Scopix::trace
}

/*----- PROTECTED REGION ID(Scopix::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	Scopix::namespace_ending
} //	namespace
