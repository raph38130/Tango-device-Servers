/*----- PROTECTED REGION ID(Gps.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Gps.cpp
//
// description : C++ source for the Gps class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Gps are implemented in this file.
//
// project :     gps ds usb/serial
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Gps.h>
#include <GpsClass.h>

#include <Serial.h>
#include <SerialClass.h>

/*----- PROTECTED REGION END -----*/	//	Gps.cpp

/**
 *  Gps class description:
 *    use SerialLine DS
 *    nmea
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//  nmea  |  Tango::DevString	Scalar
//================================================================

namespace Gps_ns
{
/*----- PROTECTED REGION ID(Gps::namespace_starting) ENABLED START -----*/

//	static initializations


/*class MyCallback : public Tango::CallBack
{

   void push_event(Tango::EventData *ed){cout << "event ED!!!" << endl;};
   void push_event(Tango::AttrConfEventData *aced){cout << "event ACED!!!" << endl;};
   void push_event(Tango::DataReadyEventData *dred){ cout << "event DRED!!!" << endl;};
   void cmd_ended(Tango::CmdDoneEvent *cmd){ cout << "command done" << endl;};

} cb2;
MyCallback *cb;
*/
/*----- PROTECTED REGION END -----*/	//	Gps::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Gps::Gps()
 *	Description : Constructors for a Tango device
 *                implementing the classGps
 */
//--------------------------------------------------------
Gps::Gps(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Gps::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Gps::constructor_1
}
//--------------------------------------------------------
Gps::Gps(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Gps::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Gps::constructor_2
}
//--------------------------------------------------------
Gps::Gps(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Gps::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Gps::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Gps::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Gps::delete_device()
{
	DEBUG_STREAM << "Gps::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Gps::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	Gps::delete_device
	delete[] attr_nmea_read;
}

//--------------------------------------------------------
/**
 *	Method      : Gps::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Gps::init_device()
{
	DEBUG_STREAM << "Gps::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Gps::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	Gps::init_device_before
	
	//	No device property to be read from database 
	
	attr_nmea_read = new Tango::DevString[1];
	/*----- PROTECTED REGION ID(Gps::init_device) ENABLED START -----*/
	
	//	Initialize device
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("__SubDevices"));
	get_db_device()->get_property(dev_prop);
	DEBUG_STREAM << "PROPERTY " << dev_prop[0].name << endl;
	DEBUG_STREAM << dev_prop[0].value_string[0];
	//cout <<"property : " << dev_prop[0];


	serial_line = new Tango::DeviceProxy(dev_prop[0].value_string[0]);
	Tango::DeviceData d;
	d << (Tango::DevULong) 38400;
	serial_line->command_inout("DevSerSetBaudRate",d);

	/*----- PROTECTED REGION END -----*/	//	Gps::init_device
}


//--------------------------------------------------------
/**
 *	Method      : Gps::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Gps::always_executed_hook()
{
	DEBUG_STREAM << "Gps::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Gps::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	Gps::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Gps::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Gps::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Gps::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Gps::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Gps::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute nmea related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------



void Gps::read_nmea(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Gps::read_nmea(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Gps::read_nmea) ENABLED START -----*/
	//	Set the attribute value

	s="hello birine";


	string s1;
	Tango::DeviceData d; //=serial_line->command_inout("DevSerReadLine");
	//cb=new MyCallback();
	//cout<<"bip1"<< endl;
	serial_line->command_inout("DevSerReadLine") >> s1 ;
	cout << " nmea" << s1 << endl;
	/*long req_id=serial_line->command_inout_asynch("DevSerReadLine");
	cout<<"      bip2 " <<endl;
	//strncpy(*attr_nmea_read,s.c_str(),s.length());
	//strcpy(*attr_nmea_read,s.c_str());
	d=serial_line->command_inout_reply(req_id-1);
	cout<<"          bip3 " <<endl;
	d >>s;
	*/
	*attr_nmea_read=CORBA::string_dup(s1.c_str()); //(Tango::DevString) (s1.c_str());
	//*attr_nmea_read = d.extractString();
	attr.set_value(attr_nmea_read);
	

	/*----- PROTECTED REGION END -----*/	//	Gps::read_nmea
}

//--------------------------------------------------------
/**
 *	Method      : Gps::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Gps::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Gps::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Gps::add_dynamic_attributes
}


/*----- PROTECTED REGION ID(Gps::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	Gps::namespace_ending
} //	namespace
